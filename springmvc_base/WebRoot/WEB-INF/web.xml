<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>springmvc</display-name>
	
	<!-- 配置前端控制器 springmvc 其本质是一个Servlet-->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextConfigLocation配置springmvc加载的配置文件 （配置处理器映射器，适配器等 ）
			如果不配置contextConfigLocation 默认加载的是/WEB-INF/servlet名称->servlet.xml-->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springmvc.xml</param-value><!-- 前端控制器的路径/名字 -->
		</init-param>
	</servlet>
	
	<!-- Mapping的作用：处理路径时：去掉请求URL的上下文路径后，
	按路径映射规则和Servlet映射路径（<url- pattern>）做匹配，如果匹配成功，则调用这个Servlet处理请求。 -->
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!-- 第一种：*.action 访问以.action结尾由DispatcherServlet进行解析
			第二种：/ ,所有访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让
			DispatcherServlet进行解析使用此种方式可以实现RESTful风格的url
			第三种：/* ，这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址
			不能由jsp页面找到handler，会报错
		-->
		<url-pattern>*.action</url-pattern> <!-- 拦截.action结尾的url -->
	</servlet-mapping>
	
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
</web-app>
